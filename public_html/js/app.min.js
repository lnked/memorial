var app = app || {};

(function(body){
    "use strict";

    app = {
        
        initPopup: function()
        {
            var $overlay = $('#overlay');

            $.popup.init('.js-open-popup', {
                cssPosition: false,
                wrapper: '.layout-wrapper'
            });

            $('body').on('click', '.j-open-popup', function(e){
                e.preventDefault();
                var popup = '', $popup = null, header = '';

                popup = $(this).attr('href');

                if (popup) {
                    popup = 'tmpl-' + popup.substr(1);
                }

                if ($(this).data('title')) {
                    header = $(this).data('title');
                }

                $popup = $(template(popup, { 'header': header }));

                $popup.addClass('temp');
                
                $popup.find('input[name="title_form"]').val(header);

                $('body').append($popup);

                $overlay.addClass('visible');

                setTimeout(function(){
                    $overlay.addClass('animate');
                    $.popup.show($popup);
                }, 10);

                return false;
            });
        },
        
        warning: function() {
            $('body').on('click', function(e){
                if ($('.j-warning-block._open').length) {
                    if (!$(e.target).closest('.j-warning-block').length && !$(e.target).hasClass('.j-warning-block')) {
                        $('.j-warning-block._open').removeClass('_open');
                    }
                }
            });

            $('body').on('click', '.j-warning-trigger', function(){
                $(this).closest('.j-warning-block').toggleClass('_open');
            });
        },

        navigation: function() {
            $('body').on('mouseenter', '.navigation__item', function(e){
                if ($(window).width() > 1120) {
                    var $this = $(this);
                    if ($this.find('.submenu').length && !$this.hasClass('is-active')) {
                        $('.navigation__item.is-active').removeClass('is-active');
                        $this.addClass('is-active');
                    }
                }
            });

            $('body').on('click', '.navigation__link', function(e){
                if ($(window).width() <= 1120) {
                    var $item = $(this).closest('.navigation__item');

                    if ($item.find('.submenu').length) {
                        e.preventDefault();

                        if (!$item.find('.submenu').find('.submenu__backuri').length) {
                            $item.find('.submenu').append('<div class="submenu__backuri">Назад</div>');
                        }

                        $item.find('.submenu').find('.submenu__backuri').on('click', function(){
                            e.preventDefault();
                            
                            $(this).closest('.is-open').removeClass("is-open");

                            return false;
                        });

                        $item.addClass("is-open");

                        return false;
                    }
                }
            });

            $('body').on('mouseleave', '.navigation__item', function(e){
                $('.navigation__item.is-active').removeClass('is-active');
            });
        },

        init: function() {
            this.navigation();
            this.initPopup();
            this.warning();
            this.map.init();
            this.tabs.init();
            this.slider.init();
            this.sandwich.init();
            this.gallery.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

	var _this;

	app.ajaxForm = {

        config: {
            form_class: '.form-ajax',
            form_reset: 'form-reset',
            link_class: '.js-request-link',
            error_class: 'error',
            error_message: 'form__error-message',
            error_message_class: 'j-error-message',
            error_message_addclass: 'show',
            form_label: '.form__wrapper',
            checkbox_label: 'checkbox__label'
        },

		callback_stack: {},

		extend: function(config)
		{
			_this = this;

			if (typeof config !== 'undefined')
			{
				var x;
				for (x in config)
				{
					if (typeof _this.config[x] !== 'undefined')
						_this.config[x] = config[x];
				}
			}
		},

		default_handler: function(form, response)
		{
			_this = this;

            if (response.status)
            {
                if (response.hasOwnProperty('redirect_url'))
                {
                    window.location.href = response.redirect_url;
                }
            }
            else if (typeof response.errors !== 'undefined' || typeof response.error_message !== 'undefined')
            {
                var errors, error_message;

                if (typeof response.errors !== 'undefined')
                {
                    errors = response.errors;
                }

                if (typeof response.error_message !== 'undefined')
                {
                    error_message = response.error_message;
                }

                _this.validation(form, errors, error_message);
            }
			
            if (response.hasOwnProperty('run_script'))
            {
                if (typeof(window[response.run_script]) == 'function')
                {
                    window[response.run_script]();
                }
            }

            if (response.hasOwnProperty('open_popup'))
            {
            	if ($('body').find('.popup.is-open').length)
            	{
            		$.popup.close($('body').find('.popup.is-open'), function(){
            			$.popup.open(response.open_popup);
            		});
            	}
            	else
            	{
            		$.popup.open(response.open_popup);
            	}
            }

			if (response.hasOwnProperty('message'))
			{
				$.popup.message(response.title, response.message);
			}

		},

		validation: function(form, errors, error_message)
        {
            _this = this;

            form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
            form.find('.' + _this.config.error_message_class).removeClass(_this.config.error_message_addclass);
            
            var fieldName, field;

            setTimeout(function() {
                if (typeof error_message !== 'undefined' && error_message !== '')
                {
                    form.find('.' + _this.config.error_message_class).html(error_message);
                    form.find('.' + _this.config.error_message_class).addClass(_this.config.error_message_addclass);
                }

                if (typeof errors !== 'undefined' && errors !== '')
                {
                    for(fieldName in errors)
                    {
                        if (form.find('input[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('input[name="'+fieldName+'"]');
                        }

                        if (form.find('select[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('select[name="'+fieldName+'"]');
                        }

                        if (form.find('textarea[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('textarea[name="'+fieldName+'"]');
                        }

                        if (field.closest('.' + _this.config.checkbox_label).length > 0)
                        {
                            field = field.closest('.' + _this.config.checkbox_label);
                        }

                        if (typeof field !== 'undefined')
                        {
                            field.addClass(_this.config.error_class);
                            field.closest(_this.config.form_label).append('<div class="' + _this.config.error_message + '">' + errors[fieldName] + '</div>');
                        }
                    }
                }
            }, 10);
        },

		upload: function()
		{
			_this = this;

			$('body').on('submit', '.form-file-upload', function(e) {
				return AIM.submit(this, {
					onStart: function()
					{

					},
					onComplete: function(result)
					{
						if (typeof result === 'object' && result.status === true && result.hasOwnProperty('photo_url'))
						{

						}
					}
				});
			});
			
			$(document).on('change', '.upload_button_onchange', function(){
				if ($(this).closest('.upload_button').find('.upload_button_field').length > 0)
				{
					$(this).closest('.upload_button').find('.upload_button_field').html($(this).val());
				}
			});
		},

		send: function(action, method, data, cb, err)
		{

			if (typeof cb !== 'function')
			{
				cb = function() {};
			}

			if (typeof err !== 'function')
			{
				err = function() {};
			}

			try {
			
				$.ajax({
					url: action,
					type: method,
					data: data,
					contentType: false,
					processData: method.toLowerCase() == 'get',
					success: cb,
					error: err,
					dataType: 'JSON'
				});

			} catch(e) {}

		},

		initLink: function()
		{
			_this = this;

			$('body').on('click', _this.config.link_class, function(e) {
				e.preventDefault ? e.preventDefault() : e.returnValue = false;
				
				var link = $(this);

				if (link.data('is-busy')) {
					return;
				}

				link.data('is-busy', true);

				var action = ($(this).attr('href')) || $(this).data('action'),
					method = ($(this).data('method')) || 'get',
					data = {};

				_this.send(
					action,
					method,
					data,
					function(response)
					{
						if (link.data('callback') && _this.callback_stack.hasOwnProperty(link.data('callback')))
						{
							_this.callback_stack[link.data('callback')](link, response);
						}
						else
						{
							_this.default_handler(link, response);
						}

						if (response.status === true)
						{
							
						}

						link.data('is-busy', false);
					},
					function(response)
					{
						_this.default_handler(link, response);
						link.data('is-busy', false);
					}
				);
			});
		},

 		initForm: function()
        {
            _this = this;

            $('body').on('submit', _this.config.form_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var form    = $(this),
                    action  = form.attr('action'),
                    method  = (form.attr('method') || 'post'),
                    data    = !!window.FormData ? new FormData(form[0]) : form.serialize();

                if (form.data('is-busy')) {
                    return;
                }

                form.data('is-busy', true);

                if (typeof button !== 'undefined')
                {
                    if (button.data('loading'))
                    {
                        button.data('original', button.text());
                        button.text(button.data('loading'));
                    }

                    button.addClass('preload');
                }

                if (form.data('precallback') && _this.callback_stack.hasOwnProperty(form.data('precallback'))) {
                    if(!_this.callback_stack[form.data('precallback')](form))
                    {
                        return false;
                    }
                }

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (form.data('callback') && _this.callback_stack.hasOwnProperty(form.data('callback')))
                        {
                            _this.callback_stack[form.data('callback')](form, response);
                        }
                        else
                        {
                            _this.default_handler(form, response);
                        }

                        if (response.status === true)
                        {
                            if (form.hasClass(_this.config.form_reset))
                            {
                                form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
                                form.get(0).reset();
                            }
                        }

                        if (typeof button !== 'undefined')
                        {
                            if (button.data('original'))
                            {
                                button.text(button.data('original'));
                            }

                            button.removeClass('preload');
                        }

                        form.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(form, response);
                        form.data('is-busy', false);
                    }
                );
            });
        },

		init: function(config)
		{
			this.extend(config);
			
			this.initForm();
			this.initLink();
		}
	};

	app.ajaxForm.init();

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.faq = {

        init: function() {
            $('body').on('click', '.j-faq-trigger', function(e){
                e.preventDefault();

                var $faq = $(this).closest('.j-faq');
                $faq.toggleClass('_open');

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.gallery = {

        init: function() {
            $('.j-gallery').magnificPopup({
                type: 'image',
                delegate: 'a.zoom',
                removalDelay: 500,
                fixedContentPos: false,
                closeOnBgClick: true,
                gallery: {
                    enabled: true
                },
                callbacks: {
                     open: function() {
                        $('body').addClass('noscroll');
                     },
                     close: function() {
                         $('body').removeClass('noscroll');
                     }
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['smallMapDefaultSet']
                });

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#1e98ff'
                    }))

            });

        },

        init: function() {
            var that = this;
            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
var app = app || {};

;(function(body){
    "use strict";

    var _this;

    app.sandwich = {

        config: {
            keyHooks: !1,
            selector: '.js-sandwich-menu',
            wrapper: '.layout-wrapper',
            overlay: '.overlay'
        },

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        isOpen: function()
        {
            return $('body').hasClass('page-visible');
        },

        hide: function()
        {
            $('body').removeClass('page-open');

            setTimeout(function(){
                $('body').removeClass('page-visible');
            }, 10);

            $(this.config.overlay).css({
                'visibility': 'hidden'
            });
        },

        toggle: function()
        {
            if ($('body').hasClass('page-visible'))
            {
                $('body').removeClass('page-open');

                setTimeout(function(){
                    $('body').removeClass('page-visible');
                }, 200);
            }
            else
            {
                $('body').addClass('page-open');

                setTimeout(function(){
                    $('body').addClass('page-visible');
                }, 10);
            }

            var visibility = 'visible';

            if (!$('body').hasClass('page-open'))
            {
                visibility = 'hidden'
            }
            
            $(_this.config.overlay).css({
                'visibility': visibility
            });
        },

        sandwichTrigger: function()
        {
            _this = this;

            if (_this.config.keyHooks)
            {
                $('body').on('keydown', function(e) {
                    if(e.keyCode == 27 && _this.isOpen())
                    {
                        _this.toggle();
                    }
                });
            };

            $('body').on('click', _this.config.selector, function(e){
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                _this.toggle();
            });
        },

        overlayTrigger: function()
        {
            _this = this;

            $('body').on('click', _this.config.overlay, function(e){
                _this.hide();
            });
        },

        init: function(config)
        {
            this.extend(config);
            this.sandwichTrigger();
            this.overlayTrigger();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.slider = {

        init: function() {
            if ($('.j-slider').length && $('.j-slider').find('.slick-slide').length)
            {
                var count = 1, classname = 'slider', $slider = '', width = $(window).width(), options = {};

                $('.j-slider').each(function(){
                    count = 1;
                    classname = 'slider';

                    options = {
                        fade: true,
                        dots: true,
                        speed: 500,
                        infinite: true,
                        autoplay: false,
                        draggable: true,
                        autoplaySpeed: 6500,
                        pauseOnHover: false,
                        useTransform: false,
                        variableWidth: false,
                        cssEase: 'linear' // ease
                    };
                    
                    $slider = $(this);

                    $slider.on('beforeChange', function(event, slick, currentSlide, nextSlide){
                        var $current = $(slick.$slides[currentSlide]);
                        var $next = $(slick.$slides[nextSlide]);
                        console.log(currentSlide, nextSlide);
                    });

                    $slider.on('afterChange', function(event, slick, currentSlide){
                        var $current = $(slick.$slides[currentSlide]);
                        console.log(currentSlide);
                    });

                    if ($slider.data('viewcount'))
                    {
                        count = parseInt($slider.data('viewcount'));
                    }

                    if ($slider.hasClass('j-slider-calc'))
                    {
                        $slider.find('.slick-slide').css({
                            'width': width + 'px'
                        });
                    }

                    if ($slider.data('classname'))
                    {
                        classname = $slider.data('classname');
                    }
                    
                    if (!$slider.hasClass('j-disable-navigation'))
                    {
                        options['prevArrow'] = '<button type="button" class="slider__nav _prev slick-prev"></button>';
                        options['nextArrow'] = '<button type="button" class="slider__nav _next slick-next"></button>';
                    }
                    else
                    {
                        options['arrows'] = false;
                    }

                    $slider.slick(options);
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.tabs = {

        init: function() {
            var $wrapper = null, tab = '';

            $('body').on('click', '.j-tab-trigger', function(e){
                e.preventDefault();

                if (!$(this).hasClass('_open')) {
                    tab = $(this).data('tab');

                    $wrapper = $(this).closest('.j-tab-wrapper');

                    $wrapper.find('.j-tab-trigger').removeClass('_current');
                    $wrapper.find('.j-tab-item').removeClass('_open');

                    $wrapper.find('#tab-'+tab).addClass('_open');
                    $(this).addClass('_current');
                }

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.zoom = {

        init: function() {
            var $image = null, src = '';

            $('.j-preview').on('click', function(e) {
                e.preventDefault();

                src = $.trim($(this).attr('href'));

                if (src !== '' && !$(this).hasClass('_current')) {
                    $image = $(this).closest('.j-zoom').find('.j-zoom-image');
                    
                    $image.html([
                        '<a href="', src ,'" class="product-item__preview__zoom__image" itemprop="image">',
                            '<img src="', src ,'" itemprop="contentUrl" alt="image name">',
                        '</a>'
                    ].join(''));

                    $('.j-preview').removeClass('_current');

                    $(this).addClass('_current');
                }

                return false;
            });
        }

    };

})(document.body);
"use strict";

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}
$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
