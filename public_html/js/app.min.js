var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function() {
            this.map.init();
            this.gallery.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.faq = {

        init: function() {
            $('body').on('click', '.j-faq-trigger', function(e){
                e.preventDefault();

                var $faq = $(this).closest('.j-faq');
                $faq.toggleClass('_open');

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.gallery = {

        init: function() {
            $('.j-gallery').magnificPopup({
                type: 'image',
                delegate: 'a.zoom',
                removalDelay: 500,
                fixedContentPos: false,
                closeOnBgClick: true,
                gallery: {
                    enabled: true
                },
                callbacks: {
                     open: function() {
                        $('body').addClass('noscroll');
                     },
                     close: function() {
                         $('body').removeClass('noscroll');
                     }
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['smallMapDefaultSet']
                });

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#1e98ff'
                    }))

            });

        },

        init: function() {
            var that = this;
            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
"use strict";

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}
$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fYXBwLmpzIiwiX2FwcC5mYXEuanMiLCJfYXBwLmdhbGxlcnkuanMiLCJfYXBwLm1hcC5qcyIsIl9mdW5jdGlvbnMuanMiLCJpbml0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1ZBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFwcCB8fCB7fTtcblxuKGZ1bmN0aW9uKGJvZHkpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYXBwID0ge1xuICAgICAgICBcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5pbml0KCk7XG4gICAgICAgICAgICB0aGlzLmdhbGxlcnkuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG59KShkb2N1bWVudC5ib2R5KTsiLCJ2YXIgYXBwID0gYXBwIHx8IHt9O1xuXG4oZnVuY3Rpb24oYm9keSl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhcHAuZmFxID0ge1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICcuai1mYXEtdHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIHZhciAkZmFxID0gJCh0aGlzKS5jbG9zZXN0KCcuai1mYXEnKTtcbiAgICAgICAgICAgICAgICAkZmFxLnRvZ2dsZUNsYXNzKCdfb3BlbicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbn0pKGRvY3VtZW50LmJvZHkpOyIsInZhciBhcHAgPSBhcHAgfHwge307XG5cbihmdW5jdGlvbihib2R5KXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFwcC5nYWxsZXJ5ID0ge1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnLmotZ2FsbGVyeScpLm1hZ25pZmljUG9wdXAoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6ICdhLnpvb20nLFxuICAgICAgICAgICAgICAgIHJlbW92YWxEZWxheTogNTAwLFxuICAgICAgICAgICAgICAgIGZpeGVkQ29udGVudFBvczogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2xvc2VPbkJnQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2FsbGVyeToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdub3Njcm9sbCcpO1xuICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ25vc2Nyb2xsJyk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbn0pKGRvY3VtZW50LmJvZHkpOyIsInZhciBhcHAgPSBhcHAgfHwge307XG5cbihmdW5jdGlvbihib2R5KXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFwcC5tYXAgPSB7XG4gICAgICAgIFxuICAgICAgICBfbWFwT2JqZWN0OiBudWxsLFxuXG4gICAgICAgIF9nZW9PYmplY3Q6IG51bGwsXG5cbiAgICAgICAgZ2V0RGF0YTogZnVuY3Rpb24oJGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciB4LCB3cmFwX2lkID0gbnVsbCwgY29vcmRzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCRlbGVtZW50LmRhdGEoJ2Nvb3JkcycpKSB7XG4gICAgICAgICAgICAgICAgY29vcmRzID0gJGVsZW1lbnQuZGF0YSgnY29vcmRzJykuc3BsaXQoJywnKTtcblxuICAgICAgICAgICAgICAgIGZvciAoeCBpbiBjb29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzW3hdID0gJC50cmltKGNvb3Jkc1t4XSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkZWxlbWVudC5hdHRyKCdpZCcpKSB7XG4gICAgICAgICAgICAgICAgd3JhcF9pZCA9ICRlbGVtZW50LmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IHdyYXBfaWQsXG4gICAgICAgICAgICAgICAgY29vcmRzOiBjb29yZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkcm93TWFwOiBmdW5jdGlvbigkZWxlbWVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGlzLmdldERhdGEoJGVsZW1lbnQpO1xuXG4gICAgICAgICAgICB5bWFwcy5yZWFkeShmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgdGhhdC5fbWFwT2JqZWN0ID0gbmV3IHltYXBzLk1hcChkYXRhLmlkLCB7XG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjogW2RhdGEuY29vcmRzWzBdLCBkYXRhLmNvb3Jkc1sxXV0sXG4gICAgICAgICAgICAgICAgICAgIHpvb206IDEzLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWydzbWFsbE1hcERlZmF1bHRTZXQnXVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5fbWFwT2JqZWN0LmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XG5cbiAgICAgICAgICAgICAgICB0aGF0Ll9tYXBPYmplY3QuY29udHJvbHMuZ2V0KCd6b29tQ29udHJvbCcpLm9wdGlvbnMuc2V0KCdzaXplJywgJ3NtYWxsJyk7XG4gICAgICAgICAgICAgICAgdGhhdC5fbWFwT2JqZWN0LmNvbnRyb2xzLmdldCgnem9vbUNvbnRyb2wnKS5vcHRpb25zLnNldCgncG9zaXRpb24nLCB7IHJpZ2h0OiAxMCwgdG9wOiA1MCB9KTtcblxuICAgICAgICAgICAgICAgIHRoYXQuX21hcE9iamVjdC5nZW9PYmplY3RzXG4gICAgICAgICAgICAgICAgICAgIC5hZGQobmV3IHltYXBzLlBsYWNlbWFyayhbZGF0YS5jb29yZHNbMF0sIGRhdGEuY29vcmRzWzFdXSwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNldDogJ2lzbGFuZHMjZG90SWNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQ29sb3I6ICcjMWU5OGZmJ1xuICAgICAgICAgICAgICAgICAgICB9KSlcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICgkKCcuai1tYXAnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkKCcuai1tYXAnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZHJvd01hcCgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxufSkoZG9jdW1lbnQuYm9keSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHNwcmludGYodikge1xuICB2YXIgc3BsaXQgPSB2LnRvU3RyaW5nKCkuc3BsaXQoJy4nKSwgcGFkID0gXCIwMFwiLCB0aW1lID0gW10sIHggPSBudWxsO1xuXG4gIGZvciAoeCBpbiBzcGxpdCkge1xuICAgIHRpbWUucHVzaChwYWQuc3Vic3RyaW5nKDAsIDIgLSBzcGxpdFt4XS50b1N0cmluZygpLmxlbmd0aCkgKyBzcGxpdFt4XSk7XG4gIH1cblxuICByZXR1cm4gdGltZS5qb2luKCcuJyk7XG59IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgYXBwLmluaXQoKTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
