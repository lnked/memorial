var app = app || {};

(function(body){
    "use strict";

    app = {
        
        initPopup: function()
        {
            $.popup.init('.j-open-popup', {
                cssPosition: false,
                wrapper: '.layout-wrapper'
            });
        },
        
        warning: function() {
            $('body').on('click', function(e){
                if ($('.j-warning-block._open').length) {
                    if (!$(e.target).closest('.j-warning-block').length && !$(e.target).hasClass('.j-warning-block')) {
                        $('.j-warning-block._open').removeClass('_open');
                    }
                }
            });

            $('body').on('click', '.j-warning-trigger', function(){
                $(this).closest('.j-warning-block').toggleClass('_open');
            });
        },

        init: function() {
            this.initPopup();
            this.warning();
            this.map.init();
            this.tabs.init();
            this.gallery.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

	var _this;

	app.ajaxForm = {

        config: {
            form_class: '.form-ajax',
            form_reset: 'form-reset',
            link_class: '.js-request-link',
            error_class: 'error',
            error_message: 'form__error-message',
            error_message_class: 'j-error-message',
            error_message_addclass: 'show',
            form_label: '.form__wrapper',
            checkbox_label: 'checkbox__label'
        },

		callback_stack: {},

		extend: function(config)
		{
			_this = this;

			if (typeof config !== 'undefined')
			{
				var x;
				for (x in config)
				{
					if (typeof _this.config[x] !== 'undefined')
						_this.config[x] = config[x];
				}
			}
		},

		default_handler: function(form, response)
		{
			_this = this;

            if (response.status)
            {
                if (response.hasOwnProperty('redirect_url'))
                {
                    window.location.href = response.redirect_url;
                }
            }
            else if (typeof response.errors !== 'undefined' || typeof response.error_message !== 'undefined')
            {
                var errors, error_message;

                if (typeof response.errors !== 'undefined')
                {
                    errors = response.errors;
                }

                if (typeof response.error_message !== 'undefined')
                {
                    error_message = response.error_message;
                }

                _this.validation(form, errors, response.error_message);
            }
			
            if (response.hasOwnProperty('open_popup'))
            {
            	if ($('body').find('.popup.is-open').length)
            	{
            		$.popup.close($('body').find('.popup.is-open'), function(){
            			$.popup.open(response.open_popup);
            		});
            	}
            	else
            	{
            		$.popup.open(response.open_popup);
            	}
            }

			if (response.hasOwnProperty('message'))
			{
				$.popup.message(response.title, response.message);
			}

		},

		validation: function(form, errors, error_message)
        {
            _this = this;

            form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
            form.find('.' + _this.config.error_message).remove();
            form.find('.' + _this.config.error_message_class).removeClass(_this.config.error_message_addclass);
            
            var fieldName, field;

            setTimeout(function() {
                if (typeof error_message !== 'undefined' && error_message !== '')
                {
                    form.find('.' + _this.config.error_message_class).html(error_message);
                    form.find('.' + _this.config.error_message_class).addClass(_this.config.error_message_addclass);
                }

                if (typeof errors !== 'undefined' && errors !== '')
                {
                    for(fieldName in errors)
                    {
                        if (form.find('input[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('input[name="'+fieldName+'"]');
                        }

                        if (form.find('select[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('select[name="'+fieldName+'"]');
                        }

                        if (form.find('textarea[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('textarea[name="'+fieldName+'"]');
                        }

                        if (field.closest('.' + _this.config.checkbox_label).length > 0)
                        {
                            field = field.closest('.' + _this.config.checkbox_label);
                        }

                        if (typeof field !== 'undefined')
                        {
                            field.addClass(_this.config.error_class);
                            field.closest(_this.config.form_label).append('<div class="' + _this.config.error_message + '">' + errors[fieldName] + '</div>');
                        }
                    }
                }
            }, 10);
        },

		upload: function()
		{
			_this = this;

			$('body').on('submit', '.form-file-upload', function(e) {
				return AIM.submit(this, {
					onStart: function()
					{

					},
					onComplete: function(result)
					{
						if (typeof result === 'object' && result.status === true && result.hasOwnProperty('photo_url'))
						{

						}
					}
				});
			});
			
			$(document).on('change', '.upload_button_onchange', function(){
				if ($(this).closest('.upload_button').find('.upload_button_field').length > 0)
				{
					$(this).closest('.upload_button').find('.upload_button_field').html($(this).val());
				}
			});
		},

		send: function(action, method, data, cb, err)
		{

			if (typeof cb !== 'function')
			{
				cb = function() {};
			}

			if (typeof err !== 'function')
			{
				err = function() {};
			}

			try {
			
				$.ajax({
					url: action,
					type: method,
					data: data,
					contentType: false,
					processData: method.toLowerCase() == 'get',
					success: cb,
					error: err,
					dataType: 'JSON'
				});

			} catch(e){}

		},

		initLink: function()
		{
			_this = this;

			$('body').on('click', _this.config.link_class, function(e) {
				e.preventDefault ? e.preventDefault() : e.returnValue = false;
				
				var link = $(this);

				if (link.data('is-busy')) {
					return;
				}

				link.data('is-busy', true);

				var action = ($(this).attr('href')) || $(this).data('action'),
					method = ($(this).data('method')) || 'get',
					data = {};

				_this.send(
					action,
					method,
					data,
					function(response)
					{
						if (link.data('callback') && _this.callback_stack.hasOwnProperty(link.data('callback')))
						{
							_this.callback_stack[link.data('callback')](link, response);
						}
						else
						{
							_this.default_handler(link, response);
						}

						if (response.status === true)
						{
							
						}

						link.data('is-busy', false);
					},
					function(response)
					{
						_this.default_handler(link, response);
						link.data('is-busy', false);
					}
				);
			});
		},

 		initForm: function()
        {
            _this = this;

            $('body').on('submit', _this.config.form_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var form    = $(this),
                    action  = form.attr('action'),
                    method  = (form.attr('method') || 'post'),
                    data    = !!window.FormData ? new FormData(form[0]) : form.serialize();

                if (form.data('is-busy')) {
                    return;
                }

                form.data('is-busy', true);

                if (typeof button !== 'undefined')
                {
                    if (button.data('loading'))
                    {
                        button.data('original', button.text());
                        button.text(button.data('loading'));
                    }

                    button.addClass('preload');
                }

                if (form.data('precallback') && _this.callback_stack.hasOwnProperty(form.data('precallback'))) {
                    if(!_this.callback_stack[form.data('precallback')](form))
                    {
                        return false;
                    }
                }

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (form.data('callback') && _this.callback_stack.hasOwnProperty(form.data('callback')))
                        {
                            _this.callback_stack[form.data('callback')](form, response);
                        }
                        else
                        {
                            _this.default_handler(form, response);
                        }

                        if (response.status === true)
                        {
                            if (form.hasClass(_this.config.form_reset))
                            {
                                form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
                                form.get(0).reset();
                            }
                        }

                        if (typeof button !== 'undefined')
                        {
                            if (button.data('original'))
                            {
                                button.text(button.data('original'));
                            }

                            button.removeClass('preload');
                        }

                        form.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(form, response);
                        form.data('is-busy', false);
                    }
                );
            });
        },

		init: function(config)
		{
			this.extend(config);
			
			this.initForm();
			this.initLink();
		}
	};

	app.ajaxForm.init();

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.faq = {

        init: function() {
            $('body').on('click', '.j-faq-trigger', function(e){
                e.preventDefault();

                var $faq = $(this).closest('.j-faq');
                $faq.toggleClass('_open');

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.gallery = {

        init: function() {
            $('.j-gallery').magnificPopup({
                type: 'image',
                delegate: 'a.zoom',
                removalDelay: 500,
                fixedContentPos: false,
                closeOnBgClick: true,
                gallery: {
                    enabled: true
                },
                callbacks: {
                     open: function() {
                        $('body').addClass('noscroll');
                     },
                     close: function() {
                         $('body').removeClass('noscroll');
                     }
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['smallMapDefaultSet']
                });

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#1e98ff'
                    }))

            });

        },

        init: function() {
            var that = this;
            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.tabs = {

        init: function() {
            var $wrapper = null, tab = '';

            $('body').on('click', '.j-tab-trigger', function(e){
                e.preventDefault();

                if (!$(this).hasClass('_open')) {
                    tab = $(this).data('tab');

                    $wrapper = $(this).closest('.j-tab-wrapper');

                    $wrapper.find('.j-tab-trigger').removeClass('_current');
                    $wrapper.find('.j-tab-item').removeClass('_open');

                    $wrapper.find('#tab-'+tab).addClass('_open');
                    $(this).addClass('_current');
                }

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.zoom = {

        init: function() {
            var $image = null, src = '';

            $('.j-preview').on('click', function(e) {
                e.preventDefault();

                src = $.trim($(this).attr('href'));

                if (src !== '' && !$(this).hasClass('_current')) {
                    $image = $(this).closest('.j-zoom').find('.j-zoom-image');
                    
                    $image.html([
                        '<a href="', src ,'" class="product-item__preview__zoom__image" itemprop="image">',
                            '<img src="', src ,'" itemprop="contentUrl" alt="image name">',
                        '</a>'
                    ].join(''));

                    $('.j-preview').removeClass('_current');

                    $(this).addClass('_current');
                }

                return false;
            });
        }

    };

})(document.body);
"use strict";

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}
$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fYXBwLmpzIiwiX2FwcC5hamF4Zm9ybS5qcyIsIl9hcHAuZmFxLmpzIiwiX2FwcC5nYWxsZXJ5LmpzIiwiX2FwcC5tYXAuanMiLCJfYXBwLnRhYnMuanMiLCJfYXBwLnpvb20uanMiLCJfZnVuY3Rpb25zLmpzIiwiaW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDVkE7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYXBwIHx8IHt9O1xuXG4oZnVuY3Rpb24oYm9keSl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhcHAgPSB7XG4gICAgICAgIFxuICAgICAgICBpbml0UG9wdXA6IGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgJC5wb3B1cC5pbml0KCcuai1vcGVuLXBvcHVwJywge1xuICAgICAgICAgICAgICAgIGNzc1Bvc2l0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiAnLmxheW91dC13cmFwcGVyJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB3YXJuaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmotd2FybmluZy1ibG9jay5fb3BlbicpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmNsb3Nlc3QoJy5qLXdhcm5pbmctYmxvY2snKS5sZW5ndGggJiYgISQoZS50YXJnZXQpLmhhc0NsYXNzKCcuai13YXJuaW5nLWJsb2NrJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5qLXdhcm5pbmctYmxvY2suX29wZW4nKS5yZW1vdmVDbGFzcygnX29wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5qLXdhcm5pbmctdHJpZ2dlcicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuai13YXJuaW5nLWJsb2NrJykudG9nZ2xlQ2xhc3MoJ19vcGVuJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFBvcHVwKCk7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmcoKTtcbiAgICAgICAgICAgIHRoaXMubWFwLmluaXQoKTtcbiAgICAgICAgICAgIHRoaXMudGFicy5pbml0KCk7XG4gICAgICAgICAgICB0aGlzLmdhbGxlcnkuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG59KShkb2N1bWVudC5ib2R5KTsiLCJ2YXIgYXBwID0gYXBwIHx8IHt9O1xuXG4oZnVuY3Rpb24oYm9keSl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF90aGlzO1xuXG5cdGFwcC5hamF4Rm9ybSA9IHtcblxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGZvcm1fY2xhc3M6ICcuZm9ybS1hamF4JyxcbiAgICAgICAgICAgIGZvcm1fcmVzZXQ6ICdmb3JtLXJlc2V0JyxcbiAgICAgICAgICAgIGxpbmtfY2xhc3M6ICcuanMtcmVxdWVzdC1saW5rJyxcbiAgICAgICAgICAgIGVycm9yX2NsYXNzOiAnZXJyb3InLFxuICAgICAgICAgICAgZXJyb3JfbWVzc2FnZTogJ2Zvcm1fX2Vycm9yLW1lc3NhZ2UnLFxuICAgICAgICAgICAgZXJyb3JfbWVzc2FnZV9jbGFzczogJ2otZXJyb3ItbWVzc2FnZScsXG4gICAgICAgICAgICBlcnJvcl9tZXNzYWdlX2FkZGNsYXNzOiAnc2hvdycsXG4gICAgICAgICAgICBmb3JtX2xhYmVsOiAnLmZvcm1fX3dyYXBwZXInLFxuICAgICAgICAgICAgY2hlY2tib3hfbGFiZWw6ICdjaGVja2JveF9fbGFiZWwnXG4gICAgICAgIH0sXG5cblx0XHRjYWxsYmFja19zdGFjazoge30sXG5cblx0XHRleHRlbmQ6IGZ1bmN0aW9uKGNvbmZpZylcblx0XHR7XG5cdFx0XHRfdGhpcyA9IHRoaXM7XG5cblx0XHRcdGlmICh0eXBlb2YgY29uZmlnICE9PSAndW5kZWZpbmVkJylcblx0XHRcdHtcblx0XHRcdFx0dmFyIHg7XG5cdFx0XHRcdGZvciAoeCBpbiBjb25maWcpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIF90aGlzLmNvbmZpZ1t4XSAhPT0gJ3VuZGVmaW5lZCcpXG5cdFx0XHRcdFx0XHRfdGhpcy5jb25maWdbeF0gPSBjb25maWdbeF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZGVmYXVsdF9oYW5kbGVyOiBmdW5jdGlvbihmb3JtLCByZXNwb25zZSlcblx0XHR7XG5cdFx0XHRfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdyZWRpcmVjdF91cmwnKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcmVzcG9uc2UucmVkaXJlY3RfdXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvcnMgIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiByZXNwb25zZS5lcnJvcl9tZXNzYWdlICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JzLCBlcnJvcl9tZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvcnMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3JfbWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcl9tZXNzYWdlID0gcmVzcG9uc2UuZXJyb3JfbWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0aW9uKGZvcm0sIGVycm9ycywgcmVzcG9uc2UuZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cdFx0XHRcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eSgnb3Blbl9wb3B1cCcpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgXHRpZiAoJCgnYm9keScpLmZpbmQoJy5wb3B1cC5pcy1vcGVuJykubGVuZ3RoKVxuICAgICAgICAgICAgXHR7XG4gICAgICAgICAgICBcdFx0JC5wb3B1cC5jbG9zZSgkKCdib2R5JykuZmluZCgnLnBvcHVwLmlzLW9wZW4nKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIFx0XHRcdCQucG9wdXAub3BlbihyZXNwb25zZS5vcGVuX3BvcHVwKTtcbiAgICAgICAgICAgIFx0XHR9KTtcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgXHRlbHNlXG4gICAgICAgICAgICBcdHtcbiAgICAgICAgICAgIFx0XHQkLnBvcHVwLm9wZW4ocmVzcG9uc2Uub3Blbl9wb3B1cCk7XG4gICAgICAgICAgICBcdH1cbiAgICAgICAgICAgIH1cblxuXHRcdFx0aWYgKHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdtZXNzYWdlJykpXG5cdFx0XHR7XG5cdFx0XHRcdCQucG9wdXAubWVzc2FnZShyZXNwb25zZS50aXRsZSwgcmVzcG9uc2UubWVzc2FnZSk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvbjogZnVuY3Rpb24oZm9ybSwgZXJyb3JzLCBlcnJvcl9tZXNzYWdlKVxuICAgICAgICB7XG4gICAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZvcm0uZmluZCgnLicgKyBfdGhpcy5jb25maWcuZXJyb3JfY2xhc3MpLnJlbW92ZUNsYXNzKF90aGlzLmNvbmZpZy5lcnJvcl9jbGFzcyk7XG4gICAgICAgICAgICBmb3JtLmZpbmQoJy4nICsgX3RoaXMuY29uZmlnLmVycm9yX21lc3NhZ2UpLnJlbW92ZSgpO1xuICAgICAgICAgICAgZm9ybS5maW5kKCcuJyArIF90aGlzLmNvbmZpZy5lcnJvcl9tZXNzYWdlX2NsYXNzKS5yZW1vdmVDbGFzcyhfdGhpcy5jb25maWcuZXJyb3JfbWVzc2FnZV9hZGRjbGFzcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUsIGZpZWxkO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3JfbWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZXJyb3JfbWVzc2FnZSAhPT0gJycpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmb3JtLmZpbmQoJy4nICsgX3RoaXMuY29uZmlnLmVycm9yX21lc3NhZ2VfY2xhc3MpLmh0bWwoZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcm0uZmluZCgnLicgKyBfdGhpcy5jb25maWcuZXJyb3JfbWVzc2FnZV9jbGFzcykuYWRkQ2xhc3MoX3RoaXMuY29uZmlnLmVycm9yX21lc3NhZ2VfYWRkY2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3JzICE9PSAndW5kZWZpbmVkJyAmJiBlcnJvcnMgIT09ICcnKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGZpZWxkTmFtZSBpbiBlcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCInK2ZpZWxkTmFtZSsnXCJdJykubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cIicrZmllbGROYW1lKydcIl0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm0uZmluZCgnc2VsZWN0W25hbWU9XCInK2ZpZWxkTmFtZSsnXCJdJykubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IGZvcm0uZmluZCgnc2VsZWN0W25hbWU9XCInK2ZpZWxkTmFtZSsnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtLmZpbmQoJ3RleHRhcmVhW25hbWU9XCInK2ZpZWxkTmFtZSsnXCJdJykubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IGZvcm0uZmluZCgndGV4dGFyZWFbbmFtZT1cIicrZmllbGROYW1lKydcIl0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmNsb3Nlc3QoJy4nICsgX3RoaXMuY29uZmlnLmNoZWNrYm94X2xhYmVsKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkID0gZmllbGQuY2xvc2VzdCgnLicgKyBfdGhpcy5jb25maWcuY2hlY2tib3hfbGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyhfdGhpcy5jb25maWcuZXJyb3JfY2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLmNsb3Nlc3QoX3RoaXMuY29uZmlnLmZvcm1fbGFiZWwpLmFwcGVuZCgnPGRpdiBjbGFzcz1cIicgKyBfdGhpcy5jb25maWcuZXJyb3JfbWVzc2FnZSArICdcIj4nICsgZXJyb3JzW2ZpZWxkTmFtZV0gKyAnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH0sXG5cblx0XHR1cGxvYWQ6IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRfdGhpcyA9IHRoaXM7XG5cblx0XHRcdCQoJ2JvZHknKS5vbignc3VibWl0JywgJy5mb3JtLWZpbGUtdXBsb2FkJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRyZXR1cm4gQUlNLnN1Ym1pdCh0aGlzLCB7XG5cdFx0XHRcdFx0b25TdGFydDogZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0b25Db21wbGV0ZTogZnVuY3Rpb24ocmVzdWx0KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQuc3RhdHVzID09PSB0cnVlICYmIHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgncGhvdG9fdXJsJykpXG5cdFx0XHRcdFx0XHR7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdCQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnLnVwbG9hZF9idXR0b25fb25jaGFuZ2UnLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRpZiAoJCh0aGlzKS5jbG9zZXN0KCcudXBsb2FkX2J1dHRvbicpLmZpbmQoJy51cGxvYWRfYnV0dG9uX2ZpZWxkJykubGVuZ3RoID4gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdCQodGhpcykuY2xvc2VzdCgnLnVwbG9hZF9idXR0b24nKS5maW5kKCcudXBsb2FkX2J1dHRvbl9maWVsZCcpLmh0bWwoJCh0aGlzKS52YWwoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzZW5kOiBmdW5jdGlvbihhY3Rpb24sIG1ldGhvZCwgZGF0YSwgY2IsIGVycilcblx0XHR7XG5cblx0XHRcdGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpXG5cdFx0XHR7XG5cdFx0XHRcdGNiID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBlcnIgIT09ICdmdW5jdGlvbicpXG5cdFx0XHR7XG5cdFx0XHRcdGVyciA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcblx0XHRcdFx0JC5hamF4KHtcblx0XHRcdFx0XHR1cmw6IGFjdGlvbixcblx0XHRcdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0XHRjb250ZW50VHlwZTogZmFsc2UsXG5cdFx0XHRcdFx0cHJvY2Vzc0RhdGE6IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09ICdnZXQnLFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGNiLFxuXHRcdFx0XHRcdGVycm9yOiBlcnIsXG5cdFx0XHRcdFx0ZGF0YVR5cGU6ICdKU09OJ1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSBjYXRjaChlKXt9XG5cblx0XHR9LFxuXG5cdFx0aW5pdExpbms6IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRfdGhpcyA9IHRoaXM7XG5cblx0XHRcdCQoJ2JvZHknKS5vbignY2xpY2snLCBfdGhpcy5jb25maWcubGlua19jbGFzcywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0ID8gZS5wcmV2ZW50RGVmYXVsdCgpIDogZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIGxpbmsgPSAkKHRoaXMpO1xuXG5cdFx0XHRcdGlmIChsaW5rLmRhdGEoJ2lzLWJ1c3knKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxpbmsuZGF0YSgnaXMtYnVzeScsIHRydWUpO1xuXG5cdFx0XHRcdHZhciBhY3Rpb24gPSAoJCh0aGlzKS5hdHRyKCdocmVmJykpIHx8ICQodGhpcykuZGF0YSgnYWN0aW9uJyksXG5cdFx0XHRcdFx0bWV0aG9kID0gKCQodGhpcykuZGF0YSgnbWV0aG9kJykpIHx8ICdnZXQnLFxuXHRcdFx0XHRcdGRhdGEgPSB7fTtcblxuXHRcdFx0XHRfdGhpcy5zZW5kKFxuXHRcdFx0XHRcdGFjdGlvbixcblx0XHRcdFx0XHRtZXRob2QsXG5cdFx0XHRcdFx0ZGF0YSxcblx0XHRcdFx0XHRmdW5jdGlvbihyZXNwb25zZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZiAobGluay5kYXRhKCdjYWxsYmFjaycpICYmIF90aGlzLmNhbGxiYWNrX3N0YWNrLmhhc093blByb3BlcnR5KGxpbmsuZGF0YSgnY2FsbGJhY2snKSkpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdF90aGlzLmNhbGxiYWNrX3N0YWNrW2xpbmsuZGF0YSgnY2FsbGJhY2snKV0obGluaywgcmVzcG9uc2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRfdGhpcy5kZWZhdWx0X2hhbmRsZXIobGluaywgcmVzcG9uc2UpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzID09PSB0cnVlKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bGluay5kYXRhKCdpcy1idXN5JywgZmFsc2UpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZnVuY3Rpb24ocmVzcG9uc2UpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0X3RoaXMuZGVmYXVsdF9oYW5kbGVyKGxpbmssIHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcdGxpbmsuZGF0YSgnaXMtYnVzeScsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG4gXHRcdGluaXRGb3JtOiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgJCgnYm9keScpLm9uKCdzdWJtaXQnLCBfdGhpcy5jb25maWcuZm9ybV9jbGFzcywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybSAgICA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiAgPSBmb3JtLmF0dHIoJ2FjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QgID0gKGZvcm0uYXR0cignbWV0aG9kJykgfHwgJ3Bvc3QnKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSAgICA9ICEhd2luZG93LkZvcm1EYXRhID8gbmV3IEZvcm1EYXRhKGZvcm1bMF0pIDogZm9ybS5zZXJpYWxpemUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChmb3JtLmRhdGEoJ2lzLWJ1c3knKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9ybS5kYXRhKCdpcy1idXN5JywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbiAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmRhdGEoJ2xvYWRpbmcnKSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRhdGEoJ29yaWdpbmFsJywgYnV0dG9uLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24udGV4dChidXR0b24uZGF0YSgnbG9hZGluZycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRDbGFzcygncHJlbG9hZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmb3JtLmRhdGEoJ3ByZWNhbGxiYWNrJykgJiYgX3RoaXMuY2FsbGJhY2tfc3RhY2suaGFzT3duUHJvcGVydHkoZm9ybS5kYXRhKCdwcmVjYWxsYmFjaycpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZighX3RoaXMuY2FsbGJhY2tfc3RhY2tbZm9ybS5kYXRhKCdwcmVjYWxsYmFjaycpXShmb3JtKSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZChcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybS5kYXRhKCdjYWxsYmFjaycpICYmIF90aGlzLmNhbGxiYWNrX3N0YWNrLmhhc093blByb3BlcnR5KGZvcm0uZGF0YSgnY2FsbGJhY2snKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tfc3RhY2tbZm9ybS5kYXRhKCdjYWxsYmFjaycpXShmb3JtLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVmYXVsdF9oYW5kbGVyKGZvcm0sIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybS5oYXNDbGFzcyhfdGhpcy5jb25maWcuZm9ybV9yZXNldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmZpbmQoJy4nICsgX3RoaXMuY29uZmlnLmVycm9yX2NsYXNzKS5yZW1vdmVDbGFzcyhfdGhpcy5jb25maWcuZXJyb3JfY2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmdldCgwKS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBidXR0b24gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uZGF0YSgnb3JpZ2luYWwnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi50ZXh0KGJ1dHRvbi5kYXRhKCdvcmlnaW5hbCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2xhc3MoJ3ByZWxvYWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5kYXRhKCdpcy1idXN5JywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXNwb25zZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVmYXVsdF9oYW5kbGVyKGZvcm0sIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uZGF0YSgnaXMtYnVzeScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuXHRcdGluaXQ6IGZ1bmN0aW9uKGNvbmZpZylcblx0XHR7XG5cdFx0XHR0aGlzLmV4dGVuZChjb25maWcpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRGb3JtKCk7XG5cdFx0XHR0aGlzLmluaXRMaW5rKCk7XG5cdFx0fVxuXHR9O1xuXG5cdGFwcC5hamF4Rm9ybS5pbml0KCk7XG5cbn0pKGRvY3VtZW50LmJvZHkpOyIsInZhciBhcHAgPSBhcHAgfHwge307XG5cbihmdW5jdGlvbihib2R5KXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFwcC5mYXEgPSB7XG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5qLWZhcS10cmlnZ2VyJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyICRmYXEgPSAkKHRoaXMpLmNsb3Nlc3QoJy5qLWZhcScpO1xuICAgICAgICAgICAgICAgICRmYXEudG9nZ2xlQ2xhc3MoJ19vcGVuJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxufSkoZG9jdW1lbnQuYm9keSk7IiwidmFyIGFwcCA9IGFwcCB8fCB7fTtcblxuKGZ1bmN0aW9uKGJvZHkpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYXBwLmdhbGxlcnkgPSB7XG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCcuai1nYWxsZXJ5JykubWFnbmlmaWNQb3B1cCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogJ2Euem9vbScsXG4gICAgICAgICAgICAgICAgcmVtb3ZhbERlbGF5OiA1MDAsXG4gICAgICAgICAgICAgICAgZml4ZWRDb250ZW50UG9zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjbG9zZU9uQmdDbGljazogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnYWxsZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ25vc2Nyb2xsJyk7XG4gICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbm9zY3JvbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxufSkoZG9jdW1lbnQuYm9keSk7IiwidmFyIGFwcCA9IGFwcCB8fCB7fTtcblxuKGZ1bmN0aW9uKGJvZHkpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYXBwLm1hcCA9IHtcbiAgICAgICAgXG4gICAgICAgIF9tYXBPYmplY3Q6IG51bGwsXG5cbiAgICAgICAgX2dlb09iamVjdDogbnVsbCxcblxuICAgICAgICBnZXREYXRhOiBmdW5jdGlvbigkZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHgsIHdyYXBfaWQgPSBudWxsLCBjb29yZHMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoJGVsZW1lbnQuZGF0YSgnY29vcmRzJykpIHtcbiAgICAgICAgICAgICAgICBjb29yZHMgPSAkZWxlbWVudC5kYXRhKCdjb29yZHMnKS5zcGxpdCgnLCcpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh4IGluIGNvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHNbeF0gPSAkLnRyaW0oY29vcmRzW3hdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY29vcmRzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCRlbGVtZW50LmF0dHIoJ2lkJykpIHtcbiAgICAgICAgICAgICAgICB3cmFwX2lkID0gJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogd3JhcF9pZCxcbiAgICAgICAgICAgICAgICBjb29yZHM6IGNvb3Jkc1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRyb3dNYXA6IGZ1bmN0aW9uKCRlbGVtZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoaXMuZ2V0RGF0YSgkZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHltYXBzLnJlYWR5KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB0aGF0Ll9tYXBPYmplY3QgPSBuZXcgeW1hcHMuTWFwKGRhdGEuaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBbZGF0YS5jb29yZHNbMF0sIGRhdGEuY29vcmRzWzFdXSxcbiAgICAgICAgICAgICAgICAgICAgem9vbTogMTMsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBbJ3NtYWxsTWFwRGVmYXVsdFNldCddXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGF0Ll9tYXBPYmplY3QuYmVoYXZpb3JzLmRpc2FibGUoJ3Njcm9sbFpvb20nKTtcblxuICAgICAgICAgICAgICAgIHRoYXQuX21hcE9iamVjdC5jb250cm9scy5nZXQoJ3pvb21Db250cm9sJykub3B0aW9ucy5zZXQoJ3NpemUnLCAnc21hbGwnKTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9tYXBPYmplY3QuY29udHJvbHMuZ2V0KCd6b29tQ29udHJvbCcpLm9wdGlvbnMuc2V0KCdwb3NpdGlvbicsIHsgcmlnaHQ6IDEwLCB0b3A6IDUwIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5fbWFwT2JqZWN0Lmdlb09iamVjdHNcbiAgICAgICAgICAgICAgICAgICAgLmFkZChuZXcgeW1hcHMuUGxhY2VtYXJrKFtkYXRhLmNvb3Jkc1swXSwgZGF0YS5jb29yZHNbMV1dLCB7fSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2V0OiAnaXNsYW5kcyNkb3RJY29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Db2xvcjogJyMxZTk4ZmYnXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCQoJy5qLW1hcCcpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoJy5qLW1hcCcpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5kcm93TWFwKCQodGhpcykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG59KShkb2N1bWVudC5ib2R5KTsiLCJ2YXIgYXBwID0gYXBwIHx8IHt9O1xuXG4oZnVuY3Rpb24oYm9keSl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhcHAudGFicyA9IHtcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkd3JhcHBlciA9IG51bGwsIHRhYiA9ICcnO1xuXG4gICAgICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5qLXRhYi10cmlnZ2VyJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCdfb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYiA9ICQodGhpcykuZGF0YSgndGFiJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIgPSAkKHRoaXMpLmNsb3Nlc3QoJy5qLXRhYi13cmFwcGVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIuZmluZCgnLmotdGFiLXRyaWdnZXInKS5yZW1vdmVDbGFzcygnX2N1cnJlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIuZmluZCgnLmotdGFiLWl0ZW0nKS5yZW1vdmVDbGFzcygnX29wZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAkd3JhcHBlci5maW5kKCcjdGFiLScrdGFiKS5hZGRDbGFzcygnX29wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnX2N1cnJlbnQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxufSkoZG9jdW1lbnQuYm9keSk7IiwidmFyIGFwcCA9IGFwcCB8fCB7fTtcblxuKGZ1bmN0aW9uKGJvZHkpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYXBwLnpvb20gPSB7XG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJGltYWdlID0gbnVsbCwgc3JjID0gJyc7XG5cbiAgICAgICAgICAgICQoJy5qLXByZXZpZXcnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgc3JjID0gJC50cmltKCQodGhpcykuYXR0cignaHJlZicpKTtcblxuICAgICAgICAgICAgICAgIGlmIChzcmMgIT09ICcnICYmICEkKHRoaXMpLmhhc0NsYXNzKCdfY3VycmVudCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbWFnZSA9ICQodGhpcykuY2xvc2VzdCgnLmotem9vbScpLmZpbmQoJy5qLXpvb20taW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICRpbWFnZS5odG1sKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8YSBocmVmPVwiJywgc3JjICwnXCIgY2xhc3M9XCJwcm9kdWN0LWl0ZW1fX3ByZXZpZXdfX3pvb21fX2ltYWdlXCIgaXRlbXByb3A9XCJpbWFnZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbWcgc3JjPVwiJywgc3JjICwnXCIgaXRlbXByb3A9XCJjb250ZW50VXJsXCIgYWx0PVwiaW1hZ2UgbmFtZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9hPidcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLmotcHJldmlldycpLnJlbW92ZUNsYXNzKCdfY3VycmVudCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ19jdXJyZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbn0pKGRvY3VtZW50LmJvZHkpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBzcHJpbnRmKHYpIHtcbiAgdmFyIHNwbGl0ID0gdi50b1N0cmluZygpLnNwbGl0KCcuJyksIHBhZCA9IFwiMDBcIiwgdGltZSA9IFtdLCB4ID0gbnVsbDtcblxuICBmb3IgKHggaW4gc3BsaXQpIHtcbiAgICB0aW1lLnB1c2gocGFkLnN1YnN0cmluZygwLCAyIC0gc3BsaXRbeF0udG9TdHJpbmcoKS5sZW5ndGgpICsgc3BsaXRbeF0pO1xuICB9XG5cbiAgcmV0dXJuIHRpbWUuam9pbignLicpO1xufSIsIiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIGFwcC5pbml0KCk7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
